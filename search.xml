<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Multithreading</title>
      <link href="/2022/03/29/Multithreading/"/>
      <url>/2022/03/29/Multithreading/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/03/28/Redis/"/>
      <url>/2022/03/28/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis是一款key-value存储结构的内存级NoSQL数据库"><a href="#Redis是一款key-value存储结构的内存级NoSQL数据库" class="headerlink" title="Redis是一款key-value存储结构的内存级NoSQL数据库"></a>Redis是一款key-value存储结构的内存级NoSQL数据库</h1><h2 id="windows版本"><a href="#windows版本" class="headerlink" title="windows版本"></a>windows版本</h2><p>在其安装目录中打开命令行启动服务端：<br><code>redis-server.exe redis.windows.conf</code></p><p>在新的命令窗口启动客户端：<code>redis-cli</code> 开始进行数据库操作</p><p>set name value               set name zzw</p><p>get name                               zzw</p><p>hset key field value             hset keya a1 zzw</p><p>hget key field                       hget keya a1                    zzw</p><h2 id="Spring-Boot整合Redis"><a href="#Spring-Boot整合Redis" class="headerlink" title="Spring Boot整合Redis"></a>Spring Boot整合Redis</h2><p>添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用时添加操作Redis接口对象 RedisTemplate：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private RedisTemplate redisTemplate;</span><br><span class="line">    ValueOperations ops = redisTemplate.opsForValue(); </span><br><span class="line">    ops.set(&quot;name&quot;,&quot;value&quot;);       </span><br><span class="line">    ops.get(&quot;name&quot;);                </span><br></pre></td></tr></table></figure><h3 id="在客户端操作redis是以字符串的形式"><a href="#在客户端操作redis是以字符串的形式" class="headerlink" title="在客户端操作redis是以字符串的形式"></a>在客户端操作redis是以字符串的形式</h3><h3 id="在SpringBoot中操作用RedisTemplate是以对象的形式"><a href="#在SpringBoot中操作用RedisTemplate是以对象的形式" class="headerlink" title="在SpringBoot中操作用RedisTemplate是以对象的形式"></a>在SpringBoot中操作用RedisTemplate是以对象的形式</h3><h3 id="要想保持一致-使用StringRedisTemplate接口对象-常用"><a href="#要想保持一致-使用StringRedisTemplate接口对象-常用" class="headerlink" title="要想保持一致 使用StringRedisTemplate接口对象(常用)"></a>要想保持一致 使用StringRedisTemplate接口对象(常用)</h3><h1 id="jedis"><a href="#jedis" class="headerlink" title="jedis"></a>jedis</h1><p>添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在配置文件中启用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    redis:</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 6379</span><br><span class="line">      client-type: jedis</span><br></pre></td></tr></table></figure><h3 id="与lettcus的区别"><a href="#与lettcus的区别" class="headerlink" title="与lettcus的区别"></a>与lettcus的区别</h3><p><img src="/2022/03/28/Redis/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220329160216629.png" alt="image-20220329160216629"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb(Windows)</title>
      <link href="/2022/03/28/Mongodb/"/>
      <url>/2022/03/28/Mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongodb是一个开源、高性能、无模式的文档型数据库"><a href="#Mongodb是一个开源、高性能、无模式的文档型数据库" class="headerlink" title="Mongodb是一个开源、高性能、无模式的文档型数据库"></a>Mongodb是一个开源、高性能、无模式的文档型数据库</h1><p>启动服务端在bin目录命令行输入：mongod –dbpath=..\data\db         指定存放位置</p><p>客户端启动： mogo –host=127.0.0.1 –port=27017</p><p>当注册到本地服务后就不用那么麻烦</p><p>可视化工具 Robo3T</p><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>db.表名.insert/save({“name”:”springboot”})</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>db.表名.find()  //查询全部</p><p>db.表名.find({name:”xxxx”})  //查询条件</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>db.表名.remove({条件})  </p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>db.表名.update({name:”要修改的”},{$set:{name:”修改成”}})   //改符合条件的第一条</p><p>db.表名.updatemany</p><p><img src="/2022/03/28/Mongodb/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220329163400255.png" alt="image-20220329163400255"></p><h1 id="Spring-Boot整合Mongodb"><a href="#Spring-Boot整合Mongodb" class="headerlink" title="Spring Boot整合Mongodb"></a>Spring Boot整合Mongodb</h1><p>添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在配置文件添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  data:</span><br><span class="line">    mongodb:</span><br><span class="line">      uri: mongodb://localhost/test    指定数据库名</span><br></pre></td></tr></table></figure><p>使用时添加操作mongodb的接口对象MongoTemplate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">  private MongoTemplate mt;</span><br><span class="line">  @Test</span><br><span class="line">  void test1()&#123;</span><br><span class="line">      book b=new book();</span><br><span class="line">      b.setId(2);b.setName(&quot;西游记&quot;);b.setPublishTime(1222);b.setUuid(&quot;1234&quot;);</span><br><span class="line">          mt.save(b);&#125;</span><br><span class="line">  @Test</span><br><span class="line">  void test2()&#123;</span><br><span class="line">      List&lt;book&gt; all = mt.findAll(book.class);</span><br><span class="line">      System.out.println(all);&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/2021/10/03/SpringCloud/"/>
      <url>/2021/10/03/SpringCloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><p><img src="/2021/10/03/SpringCloud/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220323213604059.png" alt="image-20220323213604059"></p><h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p><img src="/2021/10/03/SpringCloud/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220323214259865.png" alt="image-20220323214259865"></p><p>分为服务端和客户端</p><h3 id="EurekaServer服务端配置："><a href="#EurekaServer服务端配置：" class="headerlink" title="EurekaServer服务端配置："></a>EurekaServer服务端配置：</h3><ul><li><p>引入依赖  <code>spring-cloud-starter-netflix-eureka-server</code></p></li><li><p>在启动类添加@EnableEurekaServer注解</p></li><li><p>在配置文件编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">10086</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka-server <span class="comment">//在注册中心的服务名称</span></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"><span class="comment">//http://127.0.0.1:10086/eureka</span></span><br><span class="line">    register-with-eureka: <span class="literal">true</span> <span class="comment">//是否注册自己</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="EurekaClient客户端配置："><a href="#EurekaClient客户端配置：" class="headerlink" title="EurekaClient客户端配置："></a>EurekaClient客户端配置：</h1><ul><li>引入依赖   <code>spring-cloud-starter-netflix-eureka-client</code></li><li>在启动类添加@EnableEurekaServer注解(可不加，详情参考<a href="https://blog.csdn.net/sunxy24/article/details/105686511">https://blog.csdn.net/sunxy24/article/details/105686511</a>)</li><li>在配置文件编写：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: orderservice <span class="comment">//在注册中心的服务名称</span></span><br><span class="line">#  pattern:</span><br><span class="line">#    dateformat: MM-dd HH:mm:ss:SSS</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: <span class="literal">true</span></span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//127.0.0.1:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="服务远程调用"><a href="#服务远程调用" class="headerlink" title="服务远程调用"></a>服务远程调用</h1><p>在服务调用类的启动类添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span> <span class="comment">//负载均衡</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改业务层的代码，修改访问的url路径，用服务名代替ip、端口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">restTemplate.getForObject(<span class="string">&quot;http://userservice/user/&quot;</span>+ order.getUserId(), xxx.class);   xxx为返回的类型</span><br></pre></td></tr></table></figure><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><p><img src="/2021/10/03/SpringCloud/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220323233535532.png" alt="image-20220323233535532"></p><p>默认负载均衡是ZoneAvoidanceRule，轮询</p><p>通过定义IRule实现可以修改负责均衡规则，要在RestTemplate上添加@LoadBalanced</p><p>代码方式，在服务调用类的启动类中定义一个新的IRule：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Bena</span><br><span class="line"></span><br><span class="line">public IRule randomRule()&#123;</span><br><span class="line"></span><br><span class="line">return new RandomRule();</span><br><span class="line"></span><br><span class="line">&#125;   //不同策略对应不同的类名</span><br></pre></td></tr></table></figure><p>配置文件方式：在服务调用类的配置文件中，添加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">userservice(调用的服务名称):</span><br><span class="line"></span><br><span class="line">  ribbon:</span><br><span class="line"></span><br><span class="line">​        NFLoadBBalancerRuleClassName: com.netflix.loadbalancer.RandonRule </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Ribbon默认采用懒加载，即在第一次访问时采取创建LoadBalanceClient</p><p>饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过在服务调用类的配置文件添加配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  eager-load:</span><br><span class="line">    enabled: true</span><br><span class="line">    clients: userservice  #指定对服务名称为userservice饥饿加载</span><br></pre></td></tr></table></figure><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><p>startup.cmd -m standalone单机启动nacos 默认端口8848</p><p>在父工程中添加spring-cloud-alibaba管理依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在客户端添加依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Nacos服务分级存储-服务→集群→实例"><a href="#Nacos服务分级存储-服务→集群→实例" class="headerlink" title="Nacos服务分级存储 服务→集群→实例"></a>Nacos服务分级存储 服务→集群→实例</h3><p>在客户端添加nacos地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring：</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery：</span><br><span class="line">        cluster-name：xx //配置集群名称</span><br></pre></td></tr></table></figure><p>配置负载均衡规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userservice:      //要做配置的微服务名称</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule //集群优先 然后随机</span><br></pre></td></tr></table></figure><h3 id="Nacos控制台可以控制实例的权重值-0-1"><a href="#Nacos控制台可以控制实例的权重值-0-1" class="headerlink" title="Nacos控制台可以控制实例的权重值(0-1)"></a>Nacos控制台可以控制实例的权重值(0-1)</h3><h2 id="环境隔离-namespace"><a href="#环境隔离-namespace" class="headerlink" title="环境隔离-namespace"></a>环境隔离-namespace</h2><p>在Nacos控制台创建namespace，用来隔离不同环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery: 命名空间的id</span><br></pre></td></tr></table></figure><p>不同namespace下的服务不可见</p><p><img src="/2021/10/03/SpringCloud/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220326152043273.png" alt="image-20220326152043273"></p><p>服务注册到Naocs时，可以选择注册为临时或非临时实例，在配置文件添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        ephemeral: false /设置为非临时实例</span><br></pre></td></tr></table></figure><h1 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h1><p>在nacos控制台新建配置(注意命名空间) 格式为 name-profile.yaml</p><p>添加nacos的config依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>添加bootstrap.yml，配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: userservice</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      config:</span><br><span class="line">        file-extension: yaml</span><br></pre></td></tr></table></figure><h2 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h2><ul><li> 在@Value注入的变量所在的类上添加注解@RefreshScope</li><li><img src="/2021/10/03/SpringCloud/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220328210934981.png" alt="image-20220328210934981"></li></ul><p>注意要和配置文件中的属性一一对应</p><h2 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h2><p>多种配置的优先级：服务名-profile.yaml→服务名.yaml→本地配置</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 开发知识</title>
      <link href="/2021/10/03/SpringBoot-dev/"/>
      <url>/2021/10/03/SpringBoot-dev/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>web环境模拟测试</p><p>@SpringBootTest(webEnvironment = SrpingBootTest.Webvironment.***) 启动虚拟环境</p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220308145421445.png" alt="image-20220308145421445"></p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220308163200419.png" alt="image-20220308163200419"></p><p>生成随机数据</p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220308200357559.png" alt="image-20220308200357559"></p><p>@EnableCaching启用缓存</p><p>@Cacheable(value=””,key=”#”)将当前数据加入到缓存</p><p>Quartz</p><p>Quartz的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.MyQuartz;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//工作明细</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//MyQuartz是具体工作</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(MyQuartz.class).storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//触发器将工作明细和调度器绑定 </span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">tri</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调度器</span></span><br><span class="line">        ScheduleBuilder scheduleBuilder=CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(jd()).withSchedule(scheduleBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Task</p><p>@EnableScheduling 开启定时任务功能</p><p>在要执行定时任务的方法上@Scheduled(cron =””)  在配置文件可以配task的相关配置</p><p>Spring Boot Admin 监控</p><p>在Admin Server中的启动类配置@EnableAdminServer</p><p>客户端的配置文件</p><p>management-endpoint-health-show-details：always</p><p>management-endpoint-端点名-enabled-: t/f设置端点对外开发信息</p><p>management-endpoints-web-exposure-include:”*” 将所有端点暴露给web端</p><p>Admin Server服务端通过actuator下的各种映射方法获取端点信息并展示</p><p>​           jconsole</p><p>在配置文件中为info端点配置信息</p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220319153708822.png" alt="image-20220319153708822"></p><p>写一个配置类AppInfoContributor为info端点增添指标信息</p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220319153724076.png" alt="image-20220319153724076"></p><p>同理，写一个配置类AppHealthContributor为health端点增添指标信息</p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220319154526544.png" alt="image-20220319154526544"></p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220319160909206.png" alt="image-20220319160909206"></p><p>即在这添加具体的监听</p><p><img src="/2021/10/03/SpringBoot-dev/Users\ZZW\AppData\Roaming\Typora\typora-user-images\image-20220319161116393.png" alt="image-20220319161116393"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 运维知识</title>
      <link href="/2021/09/28/SpringBoot-om/"/>
      <url>/2021/09/28/SpringBoot-om/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot基础知识</title>
      <link href="/2021/09/26/Spring-Boot-basic/"/>
      <url>/2021/09/26/Spring-Boot-basic/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记</title>
      <link href="/2021/09/23/java/"/>
      <url>/2021/09/23/java/</url>
      
        <content type="html"><![CDATA[<p>CAP原则又称CAP定理，指的是在一个分布式系统中，<a href="https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7/9840083">一致性</a>（Consistency）、<a href="https://baike.baidu.com/item/%E5%8F%AF%E7%94%A8%E6%80%A7/109628">可用性</a>（Availability）、<a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7/23734073">分区容错性</a>（Partition tolerance）。CAP 原则指的是，这三个<a href="https://baike.baidu.com/item/%E8%A6%81%E7%B4%A0/5261200">要素</a>最多只能同时实现两点，不可能三者兼顾。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HexoBlog建站流程</title>
      <link href="/2021/09/21/HexoBlog/"/>
      <url>/2021/09/21/HexoBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GitHub-搭建个人博客"><a href="#Hexo-GitHub-搭建个人博客" class="headerlink" title="Hexo+GitHub 搭建个人博客"></a>Hexo+GitHub 搭建个人博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近看到了同学写的个人网站<a href="https://magidrag0n.github.io/">https://magidrag0n.github.io/</a>  ，感觉很有意思，便打算自己也弄一个玩玩，虽然参考了同学写的教程<a href="https://magidrag0n.github.io/2020/07/16/HexoBlog-OnlineInTen/">https://magidrag0n.github.io/2020/07/16/HexoBlog-OnlineInTen/</a>   和网上的教程，但还是踩了不少雷，这里再总结一下教程，提醒自己也方便下大家。</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="GitHub Pages 是什么？"></a>GitHub Pages 是什么？</h3><ul><li><a href="https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h3><ul><li>官网：<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Node.js是一个让JavaScript运行在服务端的开发平台,用它可以方便地搭建响应速度快、易于扩展的网络应用</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm(Node Package Manager)其实就是包管理工具，对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>需要用到Github账号、node.js、npm</p></li><li><p>新版的Node.js已自带npm</p><p>安装完毕后在命令行输入:node -v，检查是否成功安装、命令行中输入 npm -v，检查 npm 包管理器是否存在</p><p>如果显示’xxx’ 不是内部或外部命令，也不是可运行的程序或批处理文件时。请将node.js加入系统变量，或直接在命令前加上npx，npx 的原理很简单，就是运行的时候，会到<code>node_modules/.bin</code>路径和环境变量<code>$PATH</code>里面，检查命令是否存在。如果模块存在，就使用。如果不存在，就临时下载，用完就删除。</p></li><li><p>安装hexo博客框架</p><p>首先将命令行当前文件夹切换到一个新的空文件夹 (不建议中文) 当中</p><p>然后在命令行中输入：<code>npm install -g hexo-cli</code></p></li><li><p>安装 Git 推送套件：</p><p>在你创好的放hexo框架的文件夹中打开cmd(没特别说明后文的所有指令都是在此路径执行)，在命令行输入:<code>npm install --save hexo-deployer-git</code>。Tips：安装完成后会有一项 Warning 提醒，不用担心，敬请忽略</p></li><li><h3 id="快速开始："><a href="#快速开始：" class="headerlink" title="快速开始："></a>快速开始：</h3><p>命令行中输入：</p><p><code>hexo init</code>  (报错请尝试在前面加npx，后面所有关于hexo的命令都可以加npx)</p><p>此步骤会自动克隆一个 Landscape 的主题博客，并且你将在你的博客目录下看到自动生成的文件</p><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul></li><li><h3 id="启动本地博客服务器："><a href="#启动本地博客服务器：" class="headerlink" title="启动本地博客服务器："></a>启动本地博客服务器：</h3><p>在命令行中输入：</p><p><code>hexo generate</code>  # 生成静态页面，可以用hexo g缩写</p><p><code>hexo server</code>  # 启动预览，可以用hexo s缩写</p><p>将会提示你：</p><p><code>INFO Start processing.</code><br><code>INFO Hexo is running at http://localhost:4000.Press Ctrl+C to stop.</code></p><p>表示我们的博客已经部署到本地服务器上了，此时在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 便可查看你的博客！</p><p><img src="/2021/09/21/HexoBlog/3.jpg"></p><p>其中的自带的博文包含了一些简易的操作指令与讲解</p><p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo s -p 5000</code> 更改端口号后重试。</p><h2 id="Hexo-的-Github-上线"><a href="#Hexo-的-Github-上线" class="headerlink" title="Hexo 的 Github 上线"></a>Hexo 的 Github 上线</h2><p>刚才建立的网站只能在本地服务器中查看，即便拿出手机输入相同网址亦是不能查看的。我们需要让好朋友们看到我们的网站，就需要将博客服务器从本地局域服务器推送到云端服务器，我们可以用GitHub Pages来完成，让所有人都可以访问。</p><ul><li><p>使用你刚才创建的Github账户，在主页右上角找到新建项目<strong>New repository</strong></p><p><img src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide1.png"></p><p>并建立一个与你名称相同前缀的项目名**(YourName.github.io)**</p><p>此处因为我已经创建过所以不能重复创建，你可直接点 <strong>Create repository</strong></p><p><img src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide2.png"></p><p><img src="/2021/09/21/HexoBlog/2.png"></p><p>在创建好的仓库中点击Settings，选择Pages，在Source下可以选择你Github Pages所需的资源从哪里来。注:如果修改成main，在_config.yml文件末端要同步修改成branch: main。</p></li><li><h3 id="配置Git推送套件"><a href="#配置Git推送套件" class="headerlink" title="配置Git推送套件"></a>配置Git推送套件</h3><p>打开你创建的博客目录文件夹，找到_config.yml这个文件并打开编辑</p><p><img src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide3.png"></p><p>在代码末尾添加：</p><p><code>deploy:</code></p><p> <code>type: &#39;git&#39;</code></p><p> <code>repo: &quot;https://github.com/你的名字/你的名字.github.io.git&quot;</code></p><p> <code>branch: &quot;master&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/MagiDrag0n/PicBed/img/guide4.png"></p><p>至此Git推送套件已准备就绪</p><p>git有时会抽风，上传不到master分支，可以换成main分支，再修改GitHub Pages中的对应内容</p></li></ul></li><li><p>第一次使用GIt要先在命令行中输入：</p><p><code>git config --global user.email &quot;you@example.com&quot;</code>  (你的Github邮箱)<br><code>git config --global user.name &quot;Your Name&quot;</code>  (你的Github名称)</p><p>然后输入<code>hexo deploy</code> 部署文章，也可以用缩写hexo d</p><p>此时会哗啦啦流淌一行行提示，并会让你输入你的Github名称与密码</p><p>当提示结束时，便可进入网页 你的名称.github.io 查看你的博客啦！</p><p>如果输入hexo d报错，有可能是当前网络链接不太好，可以多试几次和清除代理或翻墙</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li><h3 id="博客内容的倡议"><a href="#博客内容的倡议" class="headerlink" title="博客内容的倡议"></a>博客内容的倡议</h3></li></ul><p>不能传播危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的内容。</p><p>不能散布谣言，扰乱社会秩序，破坏社会稳定。</p><p>不能散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪。</p><p>不能侮辱或者诽谤他人，侵害他人合法权益。</p><p>——《互联网信息服务管理办法》节选</p><h4 id="我们要约束自己的行为，因为这关乎所有人的互联网自由。"><a href="#我们要约束自己的行为，因为这关乎所有人的互联网自由。" class="headerlink" title="我们要约束自己的行为，因为这关乎所有人的互联网自由。"></a><strong>我们要约束自己的行为，因为这关乎所有人的互联网自由。</strong></h4><ul><li><h3 id="博客访问地址"><a href="#博客访问地址" class="headerlink" title="博客访问地址"></a>博客访问地址</h3><p><a href="https://localhost:4000/">https://localhost:4000</a>  (本地服务器开启可访问)</p><p><a href>YourName.github.io</a>  (随时随地访问最近一次推送版本的博客)</p></li><li><h3 id="常用Hexo指令"><a href="#常用Hexo指令" class="headerlink" title="常用Hexo指令"></a>常用Hexo指令</h3><p><code>hexo clean</code>  (清除缓存)</p><p><code>hexo g</code>  (迭代博客内容，每次编辑后操作)</p><p><code>hexo d</code>  (推送至github服务器)</p><p><code>hexo new page &quot;XXX&quot;</code>  (新建一个名为XXX的页面)</p><p><code>hexo new &quot;title&quot;</code>  (新建一个名为title的文章)</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
